version: "3.8"
services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: delivery_db
    volumes:
      - ./infrastructure/postgres:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    networks:
      - delivery-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - delivery-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - delivery-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - delivery-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - delivery-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - delivery-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - delivery-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.2
    container_name: logstash
    ports:
      - "5000:5000"
    networks:
      - delivery-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    ports:
      - "5601:5601"
    networks:
      - delivery-network

  catalog-service:
    build:
      context: ./backend/catalog-service
    container_name: catalog-service
    ports:
      - "8081:8081"
    depends_on:
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: local
    networks:
      - delivery-network

  order-service:
    build:
      context: ./backend/order-service
    container_name: order-service
    ports:
      - "8082:8082"
    depends_on:
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: local
    networks:
      - delivery-network

  delivery-service:
    build:
      context: ./backend/delivery-service
    container_name: delivery-service
    ports:
      - "8083:8083"
    depends_on:
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: local
    networks:
      - delivery-network

  auth-service:
    build:
      context: ./backend/auth-service
    container_name: auth-service
    ports:
      - "8084:8084" # Corrigiendo puerto para auth-service
    depends_on:
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: local
    networks:
      - delivery-network
  
  gateway-service:
    build:
      context: ./backend/gateway-service
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=local
    depends_on:
      - rabbitmq
      - minio
    networks:
      - delivery-network

  file-service:
    build:
      context: ./backend/file-service
    container_name: file-service
    ports:
      - 8086:8086
    environment:
      - SPRING_PROFILES_ACTIVE=local
    depends_on:
      - rabbitmq
    networks:
      - delivery-network

volumes:
  postgres_data:
  minio_data:

networks:
  delivery-network:
    driver: bridge
